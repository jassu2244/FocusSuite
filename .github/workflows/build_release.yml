name: Build and Release Executables

on:
  release:
    types: [created]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    outputs:
      artifact-name: FocusSuite-${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install System Dependencies (Tesseract & FFmpeg)
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            choco install tesseract-ocr ffmpeg --no-progress
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install tesseract ffmpeg
          else
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr ffmpeg
          fi

      - name: Clean build cache
        shell: bash
        run: rm -rf build dist *.spec

      - name: Install Python Dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install moviepy==1.0.3 pyinstaller
          pip install -r requirements.txt

      - name: Install Windows-specific dependencies
        if: runner.os == 'Windows'
        run: pip install pywin32

      - name: Build with PyInstaller
        shell: bash
        run: |
          pyinstaller --name FocusSuite \
            --windowed \
            --onefile \
            --add-data "FocusSuite/about.txt:." \
            --add-data "FocusSuite/ai.txt:." \
            --hidden-import cv2 \
            --hidden-import moviepy \
            --hidden-import moviepy.editor \
            --collect-all moviepy \
            FocusSuite/main.py

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: FocusSuite-${{ matrix.os }}
          path: dist/

  upload-release-assets:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact for Ubuntu
        if: contains(needs.build.outputs.artifact-name, 'ubuntu-latest')
        uses: actions/download-artifact@v3
        with:
          name: FocusSuite-ubuntu-latest
          path: ./dist_ubuntu

      - name: Download build artifact for macOS
        if: contains(needs.build.outputs.artifact-name, 'macos-latest')
        uses: actions/download-artifact@v3
        with:
          name: FocusSuite-macos-latest
          path: ./dist_macos

      - name: Download build artifact for Windows
        if: contains(needs.build.outputs.artifact-name, 'windows-latest')
        uses: actions/download-artifact@v3
        with:
          name: FocusSuite-windows-latest
          path: ./dist_windows

      - name: Upload executable for Ubuntu
        if: github.event.release && github.event.release.tag_name && runners.os == 'Linux'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist_ubuntu/FocusSuite
          asset_name: FocusSuite-linux
          asset_content_type: application/octet-stream

      - name: Upload executable for macOS
        if: github.event.release && github.event.release.tag_name && runners.os == 'macOS'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist_macos/FocusSuite
          asset_name: FocusSuite-macos
          asset_content_type: application/octet-stream

      - name: Upload executable for Windows
        if: github.event.release && github.event.release.tag_name && runners.os == 'Windows'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist_windows/FocusSuite.exe
          asset_name: FocusSuite-win.exe
          asset_content_type: application/octet-stream
