name: Build and Release Executables

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            asset_name: FocusSuite-linux
            asset_path: dist/FocusSuite
          - os: macos-latest
            asset_name: FocusSuite-macos
            asset_path: dist/FocusSuite
          - os: windows-latest
            asset_name: FocusSuite-win.exe
            asset_path: dist/FocusSuite.exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install System Dependencies (Tesseract & FFmpeg)
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            choco install tesseract-ocr ffmpeg --no-progress
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install tesseract ffmpeg
          else
            sudo apt-get update
            sudo apt-get install -y tesseract-ocr ffmpeg
          fi

      - name: Install Python Dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install moviepy==1.0.3 pyinstaller
          pip install -r requirements.txt

      - name: Install Windows-specific dependencies
        if: runner.os == 'Windows'
        run: pip install pywin32

      - name: Build with PyInstaller
        shell: bash
        run: |
          pyinstaller --name FocusSuite \
            --windowed \
            --onefile \
            --add-data "FocusSuite/about.txt:." \
            --add-data "FocusSuite/ai.txt:." \
            --hidden-import cv2 \
            --hidden-import moviepy \
            --hidden-import moviepy.editor \
            --collect-all moviepy \
            FocusSuite/main.py

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.asset_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
